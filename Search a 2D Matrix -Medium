Search a 2D Matrix - https://leetcode.com/problems/search-a-2d-matrix/description/ -  Medium

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Approach - 
1. we need to think of treating a 2d array as 1d array and then create left and right index  , left would be 0 and right would be (matrix[0].length *  matrix.length - 1).
2. then we need to do binary search finding the mid and since it's a2d array we can't do arr[mid] so we need row and col.
3. for row  - we can didvide the mid with column.length eg. if mid 5 and col are 4 then answer would be 1. Why we are dividing it with col.length is because let suppose col are 4 and mid index is 5 then we know in 0th row
 it can have till 3rd index and new row will start from 4th index.
for Column  - we can modulo the mid with column.length eg. if mid 5 and col are 4 then answer would be 1.Why we are doing modulo it with col.length is because it will give us how many index has gone by till now and 
remaining remainder will give us column.
4.then ideally we can return true or false;


Code- 

var searchMatrix = function(input, target) {
   let left = 0;
let right = (input[0].length * input.length)-1;

while(left <= right ){
    let mid = Math.floor((left+right)/2);
    const row = Math.floor(mid/input[0].length);
    const col = Math.floor(mid%input[0].length);
    // console.log(row, col);
    
    if (input[row][col] === target) {
        console.log("yes");
        return true
    } else if (input[row][col] < target) {
        left = mid +1;
        // console.log(left, "left")
    } else {
        right = mid-1;
        // console.log(right, "right");
    }
}
return false;
};
