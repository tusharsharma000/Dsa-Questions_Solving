Max Chunks To Make Sorted -  https://leetcode.com/problems/max-chunks-to-make-sorted/description/ - Medium

You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted

Approach -  we need to make array sorted in such a way that how many max parts we can create like subarray to make it sorted.If array is sorted than every parts can be created individually and we can return count
of the array and the worst case is if array is not sorted the last element is in first place then it can be sorted in like full array.
1. We can create one count var to count the chunks and on max variable which will check for current max element we have found.
2. we can increase the count once we get the index as same as element so ideally we can divide the array into chunk till there and in end we can return the coun.
It might be diffcult to understand the Approach might code help you.

Code - 

var maxChunksToSorted = function(arr) {
    let max = 0;
    let count = 0;
    for (let i=0;i<arr.length;i++) {
        max = Math.max(arr[i], max);
        if (max == i) {
            count++;
        }
    }
    return count;
};
