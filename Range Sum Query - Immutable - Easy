Range Sum Query - Immutable - https://leetcode.com/problems/range-sum-query-immutable/ - Easy

Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
Input
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Approach - You will take one array for storing the preffix sum of each element till current index and mark 0th index as same as given array[0]. then now we should check if left is not zero then we can do preffixsum[i] - array[left - 1]
and can return the answer


Code - 

var NumArray = function(nums) {
    this.prefixSum =  new Array(nums.length).fill(0);
this.prefixSum[0] = nums[0];
    for (let i=1;i<nums.length;i++) {
        this.prefixSum[i] = nums[i] + this.prefixSum[i-1];
    }
};

NumArray.prototype.sumRange = function(left, right) {
    return this.prefixSum[right] - (left == 0? 0 :this.prefixSum[left-1]);
}; 
