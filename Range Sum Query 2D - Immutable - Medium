 # Range Sum Query 2D - Immutable - https://leetcode.com/problems/range-sum-query-2d-immutable/description/  - Medium

Given a 2D matrix matrix, handle multiple queries of the following type:

Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Implement the NumMatrix class:

NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
You must design an algorithm where sumRegion works on O(1) time complexity.
Input
["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]

# Approach - 
1.first create a new2d matrix of same size as matrix.
2. then fill the 2d array with prefix sum till current element - newMatrix[i][j]+ newMatrix[i-1][j] + newMatrix[i][j-1] - newMatrix[i-1][j-1];
3. you'll be given the starting row, start col, end row, endCol - r1,c1,r2,c2;
3. the in the end return the sum = newMatrix[r2][c2] - newMatrix[r1-1][c2] - newMatrix[r2][c1-1] + newMatrix[r2-1][c2-1]. this newMatrix[r2-1][c2-1] we are doing since it has been getting removed 2 times in
newMatrix[r1-1][c2] and newMatrix[r2][c1-1] so that's why adding once again;




# Complexity
- Time complexity:O(n*m +q)
<!-- Add your time complexity here, e.g. $$O(n)$$ -->

- Space complexity: O(n*m)
<!-- Add your space complexity here, e.g. $$O(n)$$ -->

# Code
```javascript []
/**
 * @param {number[][]} matrix
 */
var NumMatrix = function(matrix) {
    const r = matrix.length;
    const c = matrix[0].length;
    this.newMatrix = Array.from({length:r},() => new Array(c).fill(0));
    this.newMatrix[0][0] = matrix[0][0];
    for (let i=1;i<this.newMatrix[0].length;i++) {
        this.newMatrix[0][i] = matrix[0][i]  + this.newMatrix[0][i-1];
    }
    for (let i=1;i<this.newMatrix.length;i++) {
        this.newMatrix[i][0] = matrix[i][0]  + this.newMatrix[i-1][0];
    }
    for (let i=1;i<this.newMatrix.length;i++) {
        for (let j=1;j<this.newMatrix[i].length;j++) {
            this.newMatrix[i][j] = (this.newMatrix[i-1][j] + this.newMatrix[i][j-1] + matrix[i][j]) - this.newMatrix[i-1][j-1];

        }
    }
};

/** 
 * @param {number} row1 
 * @param {number} col1 
 * @param {number} row2 
 * @param {number} col2
 * @return {number}
 */
NumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {
    let s = this.getElemnt(row2, col2);
    let a = this.getElemnt(row1-1, col2);
    let b = this.getElemnt(row2, col1- 1);
     let c = this.getElemnt(row1-1, col1- 1);
   return s-a-b+c;
};
NumMatrix.prototype.getElemnt = function(r, c)  {
    if (r<0 || c<0) return 0;
    return this.newMatrix[r][c];
}

/** 
 * Your NumMatrix object will be instantiated and called as such:
 * var obj = new NumMatrix(matrix)
 * var param_1 = obj.sumRegion(row1,col1,row2,col2)
 */
```
