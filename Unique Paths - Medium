Unique Paths - https://leetcode.com/problems/unique-paths/description/ - Medium

 There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.
Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Approach -  First we will create matrix of m*n and fill it with 1, now we can fill both since we will start from 1st index of row and col and we will keep on addding [row -1] + [col-1] to get tolta till that index
and in the end we can directly return the last row last col element which will be our result.

Code - 

var uniquePaths = function(m, n) {
    let aboveRow = Array(n).fill(1);
     for (let row = 1; row < m; row++) {
          let currentRow = Array(n).fill(1);
          for (let col = 1;col<n;col++) {
              currentRow[col] = currentRow[col-1] + aboveRow[col]
          }
          aboveRow = currentRow;
     }
     console.log(aboveRow);
     return aboveRow[n-1];
}; 
